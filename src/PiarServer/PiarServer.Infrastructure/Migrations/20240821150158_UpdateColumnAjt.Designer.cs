// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PiarServer.Infrastructure;

#nullable disable

namespace PiarServer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240821150158_UpdateColumnAjt")]
    partial class UpdateColumnAjt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PiarServer.Domain.Ajustes.Ajuste", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DescAjt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("desc_ajt");

                    b.Property<DateTime?>("FecDil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fec_dil");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.HasKey("Id")
                        .HasName("pk_ajustes");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_ajustes_id_mat");

                    b.ToTable("ajustes", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.AjustesPiar.AjustePiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.Property<Guid?>("IdPiar")
                        .HasColumnType("uuid")
                        .HasColumnName("id_piar");

                    b.Property<string>("SemAjt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sem_ajt");

                    b.HasKey("Id")
                        .HasName("pk_ajustes_piar");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_ajustes_piar_id_mat");

                    b.ToTable("ajustes_piar", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Barreras.Barrera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DescBarr")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("desc_barr");

                    b.Property<DateTime?>("FecDil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fec_dil");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.HasKey("Id")
                        .HasName("pk_barreras");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_barreras_id_mat");

                    b.ToTable("barreras", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.BarrerasPiar.BarreraPiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.Property<Guid?>("IdPiar")
                        .HasColumnType("uuid")
                        .HasColumnName("id_piar");

                    b.Property<string>("SemBarr")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sem_barr");

                    b.HasKey("Id")
                        .HasName("pk_barreras_piar");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_barreras_piar_id_mat");

                    b.ToTable("barreras_piar", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Evaluaciones.Evaluacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DescEva")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("desc_eva");

                    b.Property<DateTime?>("FecDil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fec_dil");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.HasKey("Id")
                        .HasName("pk_evaluaciones");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_evaluaciones_id_mat");

                    b.ToTable("evaluaciones", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.EvaluacionesPiar.EvaluacionPiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.Property<Guid?>("IdPiar")
                        .HasColumnType("uuid")
                        .HasColumnName("id_piar");

                    b.Property<string>("SemEva")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sem_eva");

                    b.HasKey("Id")
                        .HasName("pk_evaluaciones_piar");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_evaluaciones_piar_id_mat");

                    b.ToTable("evaluaciones_piar", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.FirmasPiar.FirmaPiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdPiar")
                        .HasColumnType("uuid")
                        .HasColumnName("id_piar");

                    b.HasKey("Id")
                        .HasName("pk_firmas_piar");

                    b.HasIndex("IdPiar")
                        .HasDatabaseName("ix_firmas_piar_id_piar");

                    b.ToTable("firmas_piar", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Materias.Materia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FecDil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fec_dil");

                    b.Property<Guid>("IdProf")
                        .HasColumnType("uuid")
                        .HasColumnName("id_prof");

                    b.Property<Guid>("IdUss")
                        .HasColumnType("uuid")
                        .HasColumnName("id_uss");

                    b.HasKey("Id")
                        .HasName("pk_materias");

                    b.HasIndex("IdUss")
                        .HasDatabaseName("ix_materias_id_uss");

                    b.ToTable("materias", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.MateriasPiar.MateriaPiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdPiar")
                        .HasColumnType("uuid")
                        .HasColumnName("id_piar");

                    b.Property<string>("Materia")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("materia");

                    b.HasKey("Id")
                        .HasName("pk_materias_piar");

                    b.HasIndex("IdPiar")
                        .HasDatabaseName("ix_materias_piar_id_piar");

                    b.ToTable("materias_piar", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Objetivos.Objetivo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DescObj")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("desc_obj");

                    b.Property<DateTime?>("FecDil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fec_dil");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.HasKey("Id")
                        .HasName("pk_objetivos");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_objetivos_id_mat");

                    b.ToTable("objetivos", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.ObjetivosPiar.ObjetivoPiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdMat")
                        .HasColumnType("uuid")
                        .HasColumnName("id_mat");

                    b.Property<Guid?>("IdObj")
                        .HasColumnType("uuid")
                        .HasColumnName("id_obj");

                    b.Property<Guid?>("IdPiar")
                        .HasColumnType("uuid")
                        .HasColumnName("id_piar");

                    b.Property<string>("SemObj")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sem_obj");

                    b.HasKey("Id")
                        .HasName("pk_objetivos_piar");

                    b.HasIndex("IdMat")
                        .HasDatabaseName("ix_objetivos_piar_id_mat");

                    b.ToTable("objetivos_piar", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "ReadUser"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "WriteUser"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "UpdateUser"
                        });
                });

            modelBuilder.Entity("PiarServer.Domain.Piars.Piar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("EstPiar")
                        .HasColumnType("integer")
                        .HasColumnName("est_piar");

                    b.Property<Guid>("IdEst")
                        .HasColumnType("uuid")
                        .HasColumnName("id_est");

                    b.Property<Guid>("IdProf")
                        .HasColumnType("uuid")
                        .HasColumnName("id_prof");

                    b.Property<Guid>("IdUss")
                        .HasColumnType("uuid")
                        .HasColumnName("id_uss");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_piars");

                    b.HasIndex("IdUss")
                        .HasDatabaseName("ix_piars_id_uss");

                    b.ToTable("piars", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Profesor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Auxiliar"
                        });
                });

            modelBuilder.Entity("PiarServer.Domain.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_roles_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_roles_permissions_permission_id");

                    b.ToTable("roles_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 4,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("PiarServer.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FecDil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fec_dil");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Users.UserRole", b =>
                {
                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid>("idUss")
                        .HasColumnType("uuid")
                        .HasColumnName("id_uss");

                    b.HasKey("RoleId", "idUss")
                        .HasName("pk_user_roles");

                    b.HasIndex("idUss")
                        .HasDatabaseName("ix_user_roles_id_uss");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("PiarServer.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OcurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ocurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("PiarServer.Domain.Ajustes.Ajuste", b =>
                {
                    b.HasOne("PiarServer.Domain.Materias.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_ajustes_materia_materia_id");
                });

            modelBuilder.Entity("PiarServer.Domain.AjustesPiar.AjustePiar", b =>
                {
                    b.HasOne("PiarServer.Domain.MateriasPiar.MateriaPiar", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_ajustes_piar_materia_piar_materia_piar_id");
                });

            modelBuilder.Entity("PiarServer.Domain.Barreras.Barrera", b =>
                {
                    b.HasOne("PiarServer.Domain.Materias.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_barreras_materia_materia_id");
                });

            modelBuilder.Entity("PiarServer.Domain.BarrerasPiar.BarreraPiar", b =>
                {
                    b.HasOne("PiarServer.Domain.MateriasPiar.MateriaPiar", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_barreras_piar_materia_piar_materia_piar_id");
                });

            modelBuilder.Entity("PiarServer.Domain.Evaluaciones.Evaluacion", b =>
                {
                    b.HasOne("PiarServer.Domain.Materias.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_evaluaciones_materia_materia_id");
                });

            modelBuilder.Entity("PiarServer.Domain.EvaluacionesPiar.EvaluacionPiar", b =>
                {
                    b.HasOne("PiarServer.Domain.MateriasPiar.MateriaPiar", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_evaluaciones_piar_materia_piar_materia_piar_id");
                });

            modelBuilder.Entity("PiarServer.Domain.FirmasPiar.FirmaPiar", b =>
                {
                    b.HasOne("PiarServer.Domain.Piars.Piar", null)
                        .WithMany()
                        .HasForeignKey("IdPiar")
                        .HasConstraintName("fk_firmas_piar_piar_piar_id");

                    b.OwnsOne("PiarServer.Domain.FirmasPiar.Firma", "Firma", b1 =>
                        {
                            b1.Property<Guid>("FirmaPiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AreFir")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("firma_are_fir");

                            b1.Property<byte[]>("FilePiar")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("firma_file_piar");

                            b1.Property<string>("NomFir")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("firma_nom_fir");

                            b1.Property<int>("SecPiar")
                                .HasColumnType("integer")
                                .HasColumnName("firma_sec_piar");

                            b1.HasKey("FirmaPiarId");

                            b1.ToTable("firmas_piar");

                            b1.WithOwner()
                                .HasForeignKey("FirmaPiarId")
                                .HasConstraintName("fk_firmas_piar_firmas_piar_id");
                        });

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("PiarServer.Domain.Materias.Materia", b =>
                {
                    b.HasOne("PiarServer.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("IdUss")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_materias_user_user_id");

                    b.OwnsOne("PiarServer.Domain.Materias.Informacion", "NomMat", b1 =>
                        {
                            b1.Property<Guid>("MateriaId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("GrdMat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nom_mat_grd_mat");

                            b1.Property<string>("NomMat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nom_mat_nom_mat");

                            b1.HasKey("MateriaId");

                            b1.ToTable("materias");

                            b1.WithOwner()
                                .HasForeignKey("MateriaId")
                                .HasConstraintName("fk_materias_materias_id");
                        });

                    b.Navigation("NomMat");
                });

            modelBuilder.Entity("PiarServer.Domain.MateriasPiar.MateriaPiar", b =>
                {
                    b.HasOne("PiarServer.Domain.Piars.Piar", null)
                        .WithMany()
                        .HasForeignKey("IdPiar")
                        .HasConstraintName("fk_materias_piar_piar_piar_id");
                });

            modelBuilder.Entity("PiarServer.Domain.Objetivos.Objetivo", b =>
                {
                    b.HasOne("PiarServer.Domain.Materias.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_objetivos_materias_materia_id");
                });

            modelBuilder.Entity("PiarServer.Domain.ObjetivosPiar.ObjetivoPiar", b =>
                {
                    b.HasOne("PiarServer.Domain.MateriasPiar.MateriaPiar", null)
                        .WithMany()
                        .HasForeignKey("IdMat")
                        .HasConstraintName("fk_objetivos_piar_materias_piar_materia_piar_id");
                });

            modelBuilder.Entity("PiarServer.Domain.Piars.Piar", b =>
                {
                    b.HasOne("PiarServer.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("IdUss")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_piars_user_user_id");

                    b.OwnsOne("PiarServer.Domain.Piars.CaracteristicasEstudiante", "CaracteristicasEstudiante", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Desc1Est")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("caracteristicas_estudiante_desc1est");

                            b1.Property<string>("Desc2Est")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("caracteristicas_estudiante_desc2est");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.DiligenciamientoDos", "DiligenciamientoDos", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DocsEla")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_dos_docs_ela");

                            b1.Property<DateTime>("FecDigA2")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("diligenciamiento_dos_fec_dig_a2");

                            b1.Property<string>("GrdEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_dos_grd_est");

                            b1.Property<string>("InstEduA2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_dos_inst_edu_a2");

                            b1.Property<string>("JorA2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_dos_jor_a2");

                            b1.Property<string>("SedA2")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_dos_sed_a2");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.DiligenciamientoTres", "DiligenciamientoTres", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DocDir")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_tres_doc_dir");

                            b1.Property<DateTime>("FecDilA3")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("diligenciamiento_tres_fec_dil_a3");

                            b1.Property<string>("InstEduA30")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_tres_inst_edu_a30");

                            b1.Property<string>("NomFam")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_tres_nom_fam");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.DiligenciamientoUno", "DiligenciamientoUno", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("FecDil")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("diligenciamiento_uno_fec_dil");

                            b1.Property<string>("NomDil")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_uno_nom_dil");

                            b1.Property<string>("RolSeIe")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("diligenciamiento_uno_rol_se_ie");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.Educativo", "Educativo", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("AprovUltGrad")
                                .HasColumnType("boolean")
                                .HasColumnName("educativo_aprov_ult_grad");

                            b1.Property<string>("CualInst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_cual_inst");

                            b1.Property<string>("DistInt")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_dist_int");

                            b1.Property<bool>("InfmPed")
                                .HasColumnType("boolean")
                                .HasColumnName("educativo_infm_ped");

                            b1.Property<string>("InstInfm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_inst_infm");

                            b1.Property<string>("NoInst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_no_inst");

                            b1.Property<string>("NomInst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_nom_inst");

                            b1.Property<string>("ObsUltGrd")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_obs_ult_grd");

                            b1.Property<bool>("ProgComp")
                                .HasColumnType("boolean")
                                .HasColumnName("educativo_prog_comp");

                            b1.Property<string>("SedInst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_sed_inst");

                            b1.Property<string>("TipoProgComp")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_tipo_prog_comp");

                            b1.Property<string>("TransInst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_trans_inst");

                            b1.Property<string>("UltGrado")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("educativo_ult_grado");

                            b1.Property<bool>("VincOtrInst")
                                .HasColumnType("boolean")
                                .HasColumnName("educativo_vinc_otr_inst");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.Estudiante", "Estudiante", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ApeEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_ape_est");

                            b1.Property<string>("BarrioEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_barrio_est");

                            b1.Property<bool>("CenPro")
                                .HasColumnType("boolean")
                                .HasColumnName("estudiante_cen_pro");

                            b1.Property<string>("DepaEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_depa_est");

                            b1.Property<string>("DirEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_dir_est");

                            b1.Property<string>("DocEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_doc_est");

                            b1.Property<int>("EdadEst")
                                .HasColumnType("integer")
                                .HasColumnName("estudiante_edad_est");

                            b1.Property<string>("EmaEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_ema_est");

                            b1.Property<DateTime>("FecNacEst")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("estudiante_fec_nac_est");

                            b1.Property<string>("GrdAspEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_grd_asp_est");

                            b1.Property<string>("GrpEtn")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_grp_etn");

                            b1.Property<string>("LugNacEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_lug_nac_est");

                            b1.Property<string>("LugarCenPro")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_lugar_cen_pro");

                            b1.Property<string>("MunEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_mun_est");

                            b1.Property<string>("NomEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_nom_est");

                            b1.Property<string>("OtroDocEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_otro_doc_est");

                            b1.Property<bool>("RegVicConf")
                                .HasColumnType("boolean")
                                .HasColumnName("estudiante_reg_vic_conf");

                            b1.Property<string>("TelEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_tel_est");

                            b1.Property<string>("TipDocEst")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("estudiante_tip_doc_est");

                            b1.Property<bool>("VicConf")
                                .HasColumnType("boolean")
                                .HasColumnName("estudiante_vic_conf");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.Hogar", "Hogar", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ApoCriE")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_apo_cri_e");

                            b1.Property<bool>("BajProt")
                                .HasColumnType("boolean")
                                .HasColumnName("hogar_baj_prot");

                            b1.Property<string>("EmaCui")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_ema_cui");

                            b1.Property<int>("LugOcuEst")
                                .HasColumnType("integer")
                                .HasColumnName("hogar_lug_ocu_est");

                            b1.Property<string>("NivEdCui")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_niv_ed_cui");

                            b1.Property<string>("NivEdMam")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_niv_ed_mam");

                            b1.Property<string>("NivEdPap")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_niv_ed_pap");

                            b1.Property<string>("NomCui")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_nom_cui");

                            b1.Property<string>("NomMam")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_nom_mam");

                            b1.Property<string>("NomPap")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_nom_pap");

                            b1.Property<int>("NumHer")
                                .HasColumnType("integer")
                                .HasColumnName("hogar_num_her");

                            b1.Property<string>("OcuMam")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_ocu_mam");

                            b1.Property<string>("OcuPap")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_ocu_pap");

                            b1.Property<string>("ParCui")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_par_cui");

                            b1.Property<string>("PerVivE")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_per_viv_e");

                            b1.Property<bool>("SubInstEnt")
                                .HasColumnType("boolean")
                                .HasColumnName("hogar_sub_inst_ent");

                            b1.Property<string>("TelCui")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_tel_cui");

                            b1.Property<string>("TipSub")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hogar_tip_sub");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.Recomendaciones", "Recomendaciones", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AccAdm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_acc_adm");

                            b1.Property<string>("AccDir")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_acc_dir");

                            b1.Property<string>("AccDoc")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_acc_doc");

                            b1.Property<string>("AccFam")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_acc_fam");

                            b1.Property<string>("AccPar")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_acc_par");

                            b1.Property<string>("EstrAdm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_estr_adm");

                            b1.Property<string>("EstrDir")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_estr_dir");

                            b1.Property<string>("EstrDoc")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_estr_doc");

                            b1.Property<string>("EstrFam")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_estr_fam");

                            b1.Property<string>("EstrPar")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("recomendaciones_estr_par");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Piars.Salud", "Salud", b1 =>
                        {
                            b1.Property<Guid>("PiarId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("AfiliSalud")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_afili_salud");

                            b1.Property<bool>("AtenSalud")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_aten_salud");

                            b1.Property<bool>("ConsMeds")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_cons_meds");

                            b1.Property<string>("ContrSubsi")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_contr_subsi");

                            b1.Property<string>("CualDiagMed")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_cual_diag_med");

                            b1.Property<string>("CualProdsMov")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_cual_prods_mov");

                            b1.Property<string>("CualTerMed")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_cual_ter_med");

                            b1.Property<string>("CualTratMed")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_cual_trat_med");

                            b1.Property<bool>("DiagMed")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_diag_med");

                            b1.Property<string>("Eps")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_eps");

                            b1.Property<string>("FrecAtenSalud")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_frec_aten_salud");

                            b1.Property<string>("LugEmer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_lug_emer");

                            b1.Property<string>("MedsFrecuencia")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("salud_meds_frecuencia");

                            b1.Property<bool>("ProdsMov")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_prods_mov");

                            b1.Property<bool>("TerMed")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_ter_med");

                            b1.Property<bool>("TratMed")
                                .HasColumnType("boolean")
                                .HasColumnName("salud_trat_med");

                            b1.HasKey("PiarId");

                            b1.ToTable("piars");

                            b1.WithOwner()
                                .HasForeignKey("PiarId")
                                .HasConstraintName("fk_piars_piars_id");
                        });

                    b.Navigation("CaracteristicasEstudiante");

                    b.Navigation("DiligenciamientoDos");

                    b.Navigation("DiligenciamientoTres");

                    b.Navigation("DiligenciamientoUno");

                    b.Navigation("Educativo");

                    b.Navigation("Estudiante");

                    b.Navigation("Hogar");

                    b.Navigation("Recomendaciones");

                    b.Navigation("Salud");
                });

            modelBuilder.Entity("PiarServer.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("PiarServer.Domain.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_permissions_permission_id");

                    b.HasOne("PiarServer.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_roles_role_id");
                });

            modelBuilder.Entity("PiarServer.Domain.Users.User", b =>
                {
                    b.OwnsOne("PiarServer.Domain.Users.Apellido", "Apellido", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Apellidos")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("apellido_apellidos");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("PiarServer.Domain.Users.Nombre", "Nombre", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Nombres")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nombre_nombres");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("Apellido");

                    b.Navigation("Nombre");
                });

            modelBuilder.Entity("PiarServer.Domain.Users.UserRole", b =>
                {
                    b.HasOne("PiarServer.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("PiarServer.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("idUss")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_id_uss");
                });
#pragma warning restore 612, 618
        }
    }
}
